<#@ import namespace="System.Data" #>
<#@ import namespace="Varigence.BIML.CoreLowerer.SchemaManagement" #>
<#@ import namespace="System.Linq" #>

<#
    var MetaConnection = (AstDbConnectionNode)RootNode.Connections["MetaData"];
//Table metadata - each table becomes a seperate package 	
    string TableMetaDataCommand =    					 
							   "SELECT \n"
							+   "ConnectionManager = ConnectionManager_Name,\n"
							+   "TableId = Code,\n"    
							+   "SchemaName = TableType,\n"    
                            +   "TableName =  Name, \n"
							+   "SourceSqlQuery =  SourceSqlQuery, \n"
							+   "DoDataConversion = ISNULL((SELECT TOP 1 1 FROM mdm.mdsDataMartTableColumns _M WHERE _M.Table_Code = M.Code AND _M.SourceColumnDataType <> ISNULL(_M.DestinationColumnDataType,_M.SourceColumnDataType)),0), \n"
							+   "DoDerivedColumns = ISNULL((SELECT TOP 1 1 FROM mdm.mdsDataMartDerivedColumns _D WHERE _D.TableName_Code = M.Code),0), \n"
							+   "DoLookup = ISNULL((SELECT TOP 1 1 FROM mdm.mdsDataMartLookupTables _L WHERE _L.Table_Code = M.Code),0) \n"
                            +   "FROM mdm.mdsDataMartTables M \n"
                            +   "WHERE IsActive = 1 and TableType = 'Fact';";
							
DataTable TableMetaData = ExternalDataAccess.GetDataTable(MetaConnection.ConnectionString, TableMetaDataCommand);
//Column metadata for DataConversions and SurrogateKeyLookups	
    string ColumnMetaDataCommand =    					 
							   "SELECT \n" 
							+   "TableId = Table_Code,\n "  
							+   "ColumnName = ISNULL(Name,SourceColumnName),\n"   
							+   "SourceColumnName = SourceColumnName,\n" 
							+   "DataType = upper(substring(ISNULL(DestinationColumnDataType,SourceColumnDataType), 1, 1)) + lower(substring(ISNULL(DestinationColumnDataType,SourceColumnDataType), 2, LEN(ISNULL(DestinationColumnDataType,SourceColumnDataType)))), \n"  
							+   "DoDataConversion = ISNULL((SELECT TOP 1 1 FROM mdm.mdsDataMartTableColumns _M WHERE _M.Code = M.code AND _M.SourceColumnDataType <> ISNULL(_M.DestinationColumnDataType,_M.SourceColumnDataType)),0), \n"
							+   "SourceColumnPrecision = IsNull(SourceColumnPrecision,0),\n"
							+   "SCDType  = Case when IsKeyColumn = 1 then 'Key' else case SlowlyChangingChangeType when 1 then 'Update' When 2 then 'Historical' else 'Other' END END ,\n"
							+   "SurrogateKeyLookupTable = SurrogateKeyLookupTable,\n"
							+   "SurrogateKeyRangeLookup = cast(0 as bit)\n"
                            +   "FROM mdm.mdsDataMartTableColumns M \n"
                            +   "WHERE IsActive = 1"
							+   "UNION \n"
							+   "SELECT \n" 
							+   "TableId = TableName_Code,\n "  
							+   "ColumnName = Name,\n"   
							+   "SourceColumnName = Name,\n" 
							+   "DataType = upper(substring(DestinationColumnDataType, 1, 1)) + lower(substring(DestinationColumnDataType, 2, LEN(DestinationColumnDataType))), \n"  
							+   "DoDataConversion = 0, \n"
							+   "SourceColumnPrecision = 0,\n"
							+   "SCDType  = case SlowlyChangingChangeType when 1 then 'Update' When 2 then 'Historical' else 'Other' END, \n"
							+   "SurrogateKeyLookupTable = SurrogateKeyLookupTable_Name,\n"
							+   "SurrogateKeyRangeLookup = cast(0 as bit)\n"							
                            +   "FROM mdm.mdsDataMartDerivedColumns M \n"
                            +   "WHERE IsActive = 1"
							+   "UNION \n"
							+   "SELECT \n" 
							+   "TableId = LookupTable_Code,\n "  
							+   "ColumnName = LC.Name,\n"   
							+   "SourceColumnName = LC.Name,\n" 
							+   "DataType = upper(substring(LC.ColumnDataType, 1, 1)) + lower(substring(LC.ColumnDataType, 2, LEN(LC.ColumnDataType))), \n"  
							+   "DoDataConversion = 0, \n"
							+   "SourceColumnPrecision = 0,\n"
							+   "SCDType  = case SlowlyChangingChangeType when 1 then 'Update' When 2 then 'Historical' else 'Other' END, \n"
							+   "SurrogateKeyLookupTable = SurrogateKeyLookupTable,\n"
							+   "SurrogateKeyRangeLookup = cast(0 as bit)\n"							
                            +   "FROM mdm.mdsDataMartLookupTablesColumns LC INNER JOIN mdm.mdsDataMartLookupTables L ON L.CODE = LC.LookupTable_Code \n"
                            +   "WHERE LC.IsActive = 1 and L.IsActive = 1 AND LC.ColumnType = 'Output';";
							
DataTable ColumnMetaDataTable = ExternalDataAccess.GetDataTable(MetaConnection.ConnectionString, ColumnMetaDataCommand);
//DerivedColumn metadata for business logic implementation
     string DerivedColumnMetaDataCommand =    					 
							   "SELECT \n" 
							+   "TableId = TableName_Code,\n "  
							+   "ColumnName = Name,\n" 
							+   "CalculationFormula = CalculationFormula, \n"
							+   "DataType = upper(substring(DestinationColumnDataType, 1, 1)) + lower(substring(DestinationColumnDataType, 2, LEN(DestinationColumnDataType))) \n"  
                            +   "FROM mdm.mdsDataMartDerivedColumns M \n"
                            +   "WHERE IsActive = 1;";
							
DataTable DerivedColumnMetaDataTable = ExternalDataAccess.GetDataTable(MetaConnection.ConnectionString, DerivedColumnMetaDataCommand);
//Lookup tables
    string LookupTablesMetaDataCommand =    					 
							   "SELECT \n" 
							+   "LookupId = Code,\n "  
							+   "TableId  = Table_Code,\n"
							+   "ConnectionManager = ConnectionManager,\n"
							+   "LookupSqlQuery  = ISNULL(LookupSqlQuery, 'SELECT * FROM '+ Name), \n"
							+   "NoMatchBehavior = NoMatchBehavior\n"  
                            +   "FROM mdm.mdsDataMartLookupTables L \n"
                            +   "WHERE IsActive = 1;";
							
DataTable LookupMetaDataTable = ExternalDataAccess.GetDataTable(MetaConnection.ConnectionString, LookupTablesMetaDataCommand);
//Lookup tables columns
    string LookupTablesColumnsMetaDataCommand =    					 
							   "SELECT \n" 
							+   "LookupId = LookupTable_Code,\n "  
							+   "ColumnName  = Name,\n" 
							+   "ColumnType  = ColumnType, \n"
							+   "ColumnDataType = ColumnDataType\n"  
                            +   "FROM mdm.mdsDataMartLookupTablesColumns LC \n"
                            +   "WHERE IsActive = 1;";
							
DataTable LookupColumnsMetaDataTable = ExternalDataAccess.GetDataTable(MetaConnection.ConnectionString, LookupTablesColumnsMetaDataCommand);

//Distinct surrogatekey tables
    string DistinctSurrogateKeyMetaDataCommand =    					 
							   "SELECT DISTINCT \n" 
							+   "TableId = Table_Code,\n "  
							+   "SurrogateKeyLookupTable  = SurrogateKeyLookupTable,\n"
							+   "SurrogateKeyRangeLookup = NULL,\n"
							+   "SourceColumnName = Name\n"
                            +   "FROM mdm.mdsDataMartTableColumns TC \n"
                            +   "WHERE IsActive = 1 and SurrogateKeyLookupTable IS NOT NULL;";
							
DataTable DistinctSurrogateKeyMetaDataTable = ExternalDataAccess.GetDataTable(MetaConnection.ConnectionString, DistinctSurrogateKeyMetaDataCommand);
#>

<Biml xmlns="http://schemas.varigence.com/biml.xsd">
    <Packages>
        <#  foreach(DataRow TableRow in TableMetaData.Rows) {
		//Column metadata		
		  string  ColumnfilterExp = "TableId = '" + TableRow["TableId"] + "'";
		  DataRow[] ColumnMetaData;
		  ColumnMetaData = ColumnMetaDataTable.Select(ColumnfilterExp,null,DataViewRowState.CurrentRows); 

		//DerivedColumnnMetaData
		  string DerivedColumnnfilterExp = "TableId = '" + TableRow["TableId"] + "'";
		  DataRow[] DerivedColumnMetaData;
		  DerivedColumnMetaData = DerivedColumnMetaDataTable.Select(DerivedColumnnfilterExp,null,DataViewRowState.CurrentRows); 
		  
		//LookupTableMetaData
		  string LookupfilterExp = "TableId = '" + TableRow["TableId"] + "'";
		  DataRow[] LookupMetaData;
		  LookupMetaData = LookupMetaDataTable.Select(LookupfilterExp,null,DataViewRowState.CurrentRows);   
		  #>
        <Package Name="<#=TableRow["SchemaName"] #>_<#=TableRow["TableName"] #>" ConstraintMode="Parallel" ProtectionLevel="EncryptSensitiveWithUserKey">
            <Tasks>
                <ExecuteSQL Name="Truncate DestTable" ConnectionName="AdventureWorksDataMart2012">
                    <DirectInput>TRUNCATE TABLE <#=TableRow["SchemaName"] #>.<#=TableRow["TableName"] #> </DirectInput>
                </ExecuteSQL>
                <Dataflow Name="LoadFact">
                    <PrecedenceConstraints>
                        <Inputs>
                            <Input OutputPathName="Truncate DestTable.Output" />
                        </Inputs>
                    </PrecedenceConstraints>
                    <Transformations>
                        <OleDbSource Name="Source" ConnectionName="<#=TableRow["ConnectionManager"] #>">
                            <DirectInput>
								<![CDATA[
								<#=TableRow["SourceSqlQuery"] #>
								]]>
								</DirectInput>
                        </OleDbSource>
						<#if((int)TableRow["DoDataConversion"] == 1) { #>
                        <DataConversion Name="DataConversions">
                            <Columns>
								<# foreach(DataRow DataConversion in ColumnMetaData) { #>
								<#if((int)DataConversion["DoDataConversion"] == 1) { #>
                                <Column DataType="<#=DataConversion["DataType"] #>" SourceColumn="<#=DataConversion["SourceColumnName"] #>" TargetColumn="<#=DataConversion["ColumnName"] #>" />
								<#} }#>
                            </Columns>
                        </DataConversion>
						<#} #>
						<#if((int)TableRow["DoLookup"] == 1) { #>
						<#foreach(DataRow LookupTables in LookupMetaData) { 
								//LookupTableColumnsMetaData
								  string LookupColumnsfilterExp = "LookupId = '" + LookupTables["LookupId"] + "'";
								  DataRow[] LookupColumnsMetaData;
								  LookupColumnsMetaData = LookupColumnsMetaDataTable.Select(LookupColumnsfilterExp,null,DataViewRowState.CurrentRows); 
								  #>
						 <Lookup Name="Lookup <#=LookupTables["LookupId"] #>" OleDbConnectionName="AdventureWorksDataMart2012" NoMatchBehavior="<#=LookupTables["NoMatchBehavior"] #>">
                            <Annotations>
                                <Annotation AnnotationType="Tag" Tag="GetOutsideColumnsLookup" />
                            </Annotations>
                        	<DirectInput>
								<![CDATA[
								  <#=LookupTables["LookupSqlQuery"] #>
								]]>
								</DirectInput>							
                            <Inputs>
							   <# 
									//LookupTableInputColumnsMetaData
									  string LookupColumnsInputfilterExp = "ColumnType = 'Input'";
									  DataRow[] LookupColumnsInputMetaData;
									  LookupColumnsInputMetaData = LookupColumnsMetaDataTable.Select(LookupColumnsInputfilterExp,null,DataViewRowState.CurrentRows); 
									  #>								
								<# foreach(DataRow InputColumns in LookupColumnsInputMetaData) { #>
						       <Column SourceColumn="<#=InputColumns["ColumnName"] #>" TargetColumn="<#=InputColumns["ColumnName"] #>" />
                        		<#} #>	
                        </Inputs>
                            <Outputs>
							   <#
									//LookupTableOutputColumnsMetaData
									  string LookupColumnsOutputfilterExp = "ColumnType = 'Output'";
									  DataRow[] LookupColumnsOutputMetaData;
									  LookupColumnsOutputMetaData = LookupColumnsMetaDataTable.Select(LookupColumnsOutputfilterExp,null,DataViewRowState.CurrentRows); 
									  #> 
								<# foreach(DataRow OutputColumns in LookupColumnsOutputMetaData) { #>
                                <Column SourceColumn="<#=OutputColumns["ColumnName"] #>" TargetColumn="<#=OutputColumns["ColumnName"] #>" />
								<#} #>
                            </Outputs>
                        </Lookup>
					 
						<#} #>
						<#} #>
						<#if((int)TableRow["DoDerivedColumns"] == 1) { #>
                        <DerivedColumns Name="DER Calculations">
                            <Columns>
								<# foreach(DataRow DerivedColumns in DerivedColumnMetaData) { #>
                                <Column Name="<#=DerivedColumns["ColumnName"] #>" DataType="<#=DerivedColumns["DataType"]#>" Precision="26" Scale="3"><#=DerivedColumns["CalculationFormula"] #></Column>
								<#} #>
							</Columns>
                        </DerivedColumns>
						<#} #> 
					
						 	<# 
							  string  DistinctSurrogateKeyLookupfilterExp = "TableId = '" + TableRow["TableId"] + "'";
							  DataRow[] DistinctSurrogateKeyLookupMetaData;
							  DistinctSurrogateKeyLookupMetaData = DistinctSurrogateKeyMetaDataTable.Select(DistinctSurrogateKeyLookupfilterExp,null,DataViewRowState.CurrentRows);							  
								
							  var DestinationSKLookupMapping = (from r in DistinctSurrogateKeyLookupMetaData.AsEnumerable()
       							 select r["SurrogateKeyLookupTable"]).Distinct().ToList();
							  #>
						
						 <# foreach(var SurrogateKeyLookupTable in DestinationSKLookupMapping) { #>
							
                            <Lookup Name="SKLookup_<#=SurrogateKeyLookupTable#>" OleDbConnectionName="AdventureWorksDataMart2012" NoMatchBehavior="RedirectRowsToNoMatchOutput">
                            <Annotations>
                                <Annotation AnnotationType="Tag" Tag="SKLookup" />
                            </Annotations>
                        	<ExternalTableInput Table="Dim.<#=SurrogateKeyLookupTable #>"></ExternalTableInput>

							<Inputs>	
								<#
									//LookupTableInputColumns
									  string SKLookupInputfilterExp = "SurrogateKeyLookupTable = '" + SurrogateKeyLookupTable + "'";
									  DataRow[] SKLookupInputMetaData;
									  SKLookupInputMetaData = ColumnMetaDataTable.Select(SKLookupInputfilterExp,null,DataViewRowState.CurrentRows); 
									  #>															
						       <Column SourceColumn="<#=SurrogateKeyLookupTable#>BK" TargetColumn="<#=SurrogateKeyLookupTable#>BK" />
                        </Inputs>
                            <Outputs>
							  <Column SourceColumn="<#=SurrogateKeyLookupTable#>_ID" TargetColumn="<#=SurrogateKeyLookupTable #>_ID" />
                            </Outputs>						
						</Lookup>
								 
						<Lookup Name="<#=SurrogateKeyLookupTable#>_EarlyArrivingFactsAdd" NoMatchBehavior="IgnoreFailure" OleDbConnectionName="AdventureWorksDataMart2012" CacheMode="Partial">
							  <InputPath OutputPathName="SKLookup_<#=SurrogateKeyLookupTable#>.NoMatch"/>

							<DirectInput>SELECT <#=SurrogateKeyLookupTable#>_ID, <#=SurrogateKeyLookupTable#>BK AS LookupKey FROM Dim.<#=SurrogateKeyLookupTable#> </DirectInput>
						     <Inputs>							
						       <Column SourceColumn="<#=SurrogateKeyLookupTable#>BK" TargetColumn="LookupKey" />
                             </Inputs>
							 <Outputs>
								<Column SourceColumn="<#=SurrogateKeyLookupTable#>_ID" TargetColumn="<#=SurrogateKeyLookupTable #>_ID" />
                             </Outputs>
							 <Parameters>
								 <Parameter SourceColumn="<#=SurrogateKeyLookupTable#>BK" TargetColumn="LookupKey"/>
                             </Parameters>
							 <ParameterizedQuery>
								 EXEC Proc_AddEarlyArrivingFacts_<#=SurrogateKeyLookupTable#>  @LookupKey = ?
                             </ParameterizedQuery>
						</Lookup>
						<UnionAll Name="UNION_<#=SurrogateKeyLookupTable#>">
							<InputPaths>
								<InputPath OutputPathName="SKLookup_<#=SurrogateKeyLookupTable#>.Match"/>
								<InputPath OutputPathName="<#=SurrogateKeyLookupTable#>_EarlyArrivingFactsAdd.Match"/>
                            </InputPaths>
                        </UnionAll>
						
								 <#}  #>						
						
                        <OleDbDestination Name="Dest" ConnectionName="AdventureWorksDataMart2012">
                        	<ExternalTableOutput Table="Fact.<#=TableRow["TableName"] #>" />
                            <Columns>
								 
								<#

								var DestinationMapping = (from r in ColumnMetaData.AsEnumerable()
       							 select r["SourceColumnName"]).Distinct().ToList();
								#>
								<# foreach(var ColumnName in DestinationMapping) { #>
                                <Column SourceColumn="<#=ColumnName#>" TargetColumn="<#=ColumnName#>" />
                                <#} #>
                            </Columns>
                        </OleDbDestination>
                    </Transformations>
                </Dataflow>
            </Tasks>
        </Package>
		<#} #>
    </Packages>
</Biml>